Разберем QuickSort код и добавим комментарии:

public class QuickSort {
    public static void quickSort(int[] array, int left, int right) {
        if (left < right) { // Проверяем, что левая граница меньше правой (базовый случай для рекурсии)
            int pivotIndex = partition(array, left, right); // Находим индекс опорного элемента
            quickSort(array, left, pivotIndex - 1); // Рекурсивно сортируем левую часть массива
            quickSort(array, pivotIndex + 1, right); // Рекурсивно сортируем правую часть массива
        }
    }

    public static int partition(int[] array, int left, int right) {
        int pivot = array[right]; // Опорный элемент - последний элемент массива
        int i = left;

        for (int j = left; j < right; j++) { // Проходим по всем элементам в диапазоне
            if (array[j] < pivot) { // Если текущий элемент меньше опорного
                int temp = array[i];
                array[i] = array[j]; // Меняем элементы местами, чтобы разделить их
                array[j] = temp;
                i++; // Увеличиваем индекс меньшего элемента
            }
        }

        array[right] = array[i]; // Перемещаем опорный элемент на его окончательную позицию
        array[i] = pivot;
        return i; // Возвращаем индекс опорного элемента
    }

    public static void main(String[] args) {
        int[] array = {4, 2, 7, 1, 9, 3};
        quickSort(array, 0, array.length - 1); // Вызываем сортировку с начальными параметрами
        for (int num : array) {
            System.out.print(num + " "); // Выводим отсортированный массив
        }
    }
}

Этот код реализует алгоритм быстрой сортировки. Основная идея заключается в разделении массива на две части: элементы, меньшие опорного, и элементы, большие опорного, затем сортировке каждой части рекурсивно.

Плюсы:
- Быстрая сортировка имеет среднюю временную сложность O(n log n), что делает ее эффективной для больших массивов.
- Не требует дополнительной памяти для сортировки (in-place сортировка).

Минусы:
- В худшем случае (если массив уже отсортирован в обратном порядке), временная сложность может быть O(n^2), что менее эффективно.
- Не является стабильной сортировкой (не сохраняет относительный порядок равных элементов).
